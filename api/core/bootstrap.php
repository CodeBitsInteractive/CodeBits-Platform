<?php
//==============================================================
//  CodeBits Platform
//  Open Source PHP Framework for Applications and Websites
//  by Ilya Rastorguev
//==============================================================
//  Файл:           bootstrap.php
//  Назначение:     Сборщик системы
//  Разработчик:    InterWave
//  Версия:         1.0
//==============================================================
// Проверка доступа к файлу
session_start(); // Старт сессий
defined('ROOT') OR exit('Прямой доступ к скрипту запрещен настройками безопасности');

//==============================================================
//  Определяем системные константы
//==============================================================
define("ENVMODE", "debug"); // Режим работы среды
define("DOMAIN", $_SERVER['HTTP_HOST']); // Домен сайта
define("URL", strtolower($_SERVER['REQUEST_URI'])); // URL

// Подключаем вспомогательные функции
require(ROOT.'/core/functions.php'); // Класс конфигураций

//==============================================================
//  Проверка версии PHP
//==============================================================
if(!version_compare(PHP_VERSION, '5.3', '>=')){
    render_message('CodeBits Platform work with PHP v.5.3 or newest');
}

//=================================================================
//  ПОДКЛЮЧАЕМ КЛАССЫ
//=================================================================
//  Просто подключаем все системные классы, нужные нам для работы 
//  скрипта
//=================================================================
load_system_libs(); // Загрузить системные библиотеки

//=================================================================
//  ОБРАБОТКА КОДИРОВКИ
//=================================================================
//  Включение mbstring и iconv расширений если они доступны и 
//  запись констант, говорящих об их доступности
//=================================================================
detect_encoding(); // Определение кодировки

//=================================================================
//  ОПРЕДЕЛЕНИЕ СРЕДЫ ПРИЛОЖЕНИЯ
//=================================================================
//  Среда приложения определяется конфигурацией системы и на ее 
//  основе строится работа скрипта. В режиме release в случае 
//  возникновения ошибки будет возвращен статус Internal Server 
//  Error
//=================================================================
// В зависимости от среды приложения
switch(ENVMODE){
    case 'debug': // Режим отладки
        error_reporting(E_ALL); // Отчеты об ошибках
        ini_set("display_errors", 1);  // Отображение отчетов
        break;
    case 'testing': // Режим тестирования
        break;
    case 'release': // Режим продакшна
        break;
    default:
        render_message('Wrong system mode');
        break;
}

//=================================================================
//  ПОЛУЧАЕМ НАСТРОЙКИ РЕСУРСА
//=================================================================
//  Получить настройки ресурса из JSON и выгрузить их в менеджере
//=================================================================
// Получение конфигов
$CFG = new Config(); // Новый экземпляр класса работы с конфигами
$getconf = $CFG->get_configs(); // Получить конфиги
if(!$getconf['complete']){ // Конфиги не получены
    render_message($getconf['message']);
}

// Проверка настроек API
if(!defined("WRAPPER") || !WRAPPER){ // Если идет запрос API
    header('Access-Control-Allow-Origin: '.$CFG->line['api']['domain']); // Активация кросс-доменных запросов
    if(!$CFG->line['api']['enabled']){ // API отключен
        render_message("API is disabled by engine configurations.");
    }
}

//=================================================================
//  ЗАГРУЖАЕМ ЯЗЫКОВЫЕ ПАКЕТЫ
//=================================================================
//  Здесь мы определяем получаемый язык и включаем его для рендера
//=================================================================
$_lng = detect_language($CFG->line['system']['default_language']); // Определяем язык

// Инициализация языков
$LANG = new Lang($_lng); // Новый экземпляр БД
$init_lang = $LANG->load(); // Загрузить язык
if(!$init_lang['complete']){ // Ошибка подключения
    render_message($init_lang['message']);
}else{ // Язык установлен
    setcookie("lang", $LANG->curr_lang, time()+(365*24*60*60), "/"); // Установить язык
}

//=================================================================
//  РАБОТА ИНСТАЛЛЯТОРА
//=================================================================
//  Если система не установлена (получаем флаг в конфигурациях),
//  то запускаем программу установки
//=================================================================
if(!$CFG->line['installed']){ // Не установлено
    if(!defined("WRAPPER") || !WRAPPER){ // API
        render_message('Please, run installer from root domain URL');
    }else{ // Default
        require_once $_SERVER['DOCUMENT_ROOT'].'/install/install.php';
        exit();
    }
}

//=================================================================
//  СОЗДАЕМ ПОДКЛЮЧЕНИЕ К БАЗЕ ДАННЫХ
//=================================================================
//  Теперь нам нужно создать подключение к базе данных. Для этого
//  мы инициализируем объект.
//=================================================================
// Инициализация БД
$DB = new DB($CFG->line['db']); // Новый экземпляр БД
$init_db = $DB->initialize(); // Инициализация БД
if(!$init_db['complete']){ // Ошибка подключения
    render_message($init_db['message']);
}else{ // Все ок
    define("PREFIX", $DB->params['prefix']); // Префикс в константу
}

// Подключение к БД
$_connect = $DB->connect(); // Подключение
if(!$_connect['complete']){ // Ошибка подключения
    render_message($_connect['message']);
}

//=================================================================
//  ПОДКЛЮЧАЕМ МОДУЛЬ КЕШИРОВАНИЯ
//=================================================================
//  Здесь мы подключаем модуль для работы с кешем
//=================================================================
$CACHE = new Cache(['lang'=>$LANG, 'confs'=>$CFG->line['system']['cache']]); // Новый экземпляр класса кеша

//=================================================================
//  ПОДКЛЮЧАЕМ МОДУЛЬ ПОЛЬЗОВАТЕЛЕЙ
//=================================================================
//  Здесь мы подключаем модуль для работы с пользователями
//=================================================================
$USR = new User(['secret'=>$CFG->line['system']['secret'], 'lang'=>$LANG, 'db'=>$DB, 'confs'=>$CFG->line['users']]); // Новый экземпляр юзера
$check = $USR->check_auth(); // Проверка авторизации
if(!$check['complete']){
    render_message($LANG->line($check['code']));
}

//=================================================================
//  ПРОВЕРЯЕМ ДОСТУПНОСТЬ СИСТЕМЫ
//=================================================================
//  Доступность системы только для администрации при выключеном
//  приложении
//=================================================================
if(!$CFG->line['website']['enabled'] && (!$USR->auth['is_auth'] || ($USR->auth['is_auth'] && !$USR->auth['is_admin']))){
    if(!defined("WRAPPER") || !WRAPPER){ // API
        render_message('Server is currently offline');
    }else{ // Default
        header("Location: /errors/?code=999");
        exit();
    }
}

//=================================================================
//  ПОДКЛЮЧАЕМ РОУТЕР ЗАПРОСОВ
//=================================================================
//  Роутер запросов помогает нам определить, какой контроллер 
//  должен обрабатываться в данный момент.
//=================================================================
$RTR = new Router(); // Новый экземпляр роутера
$route = $RTR->route(); // Начать роутинг
if(!$route['complete']){ // Ошибка роутинга
    render_message($route['message']);
}else{ // Все ок
    require_once $route['path']; // Подключаем контроллер
}

//=================================================================
//  ПОДКЛЮЧАЕМ МОДУЛИ
//=================================================================
//  Поиск и подключение контроллера на основе роутера запросов
//=================================================================

//=================================================================
//  ПОДКЛЮЧАЕМ КОНТРОЛЛЕР
//=================================================================
//  Поиск и подключение контроллера на основе роутера запросов
//=================================================================
// Базовые библиотеки для загрузки
// в контроллеры
$_libs = [
    [ // Роутер запросов
        'name'=> 'user',
        'object'=> $USR
    ],
    [ // Роутер запросов
        'name'=> 'router',
        'object'=> $RTR
    ],
    [ // Менеджер БД
        'name'=>'db',
        'object'=>$DB
    ],
    [ // Менеджер конфигов
        'name'=>'config',
        'object'=>$CFG
    ],
    [ // Менеджер конфигов
        'name'=>'lang',
        'object'=>$LANG
    ],
    [ // Менеджер кеша
        'name'=>'cache',
        'object'=>$CACHE
    ]
];

// Поиск класса
if(class_exists($route['controller'])){ // Класс найден
    $CTR = new $route['controller']($route['data'], $_libs); // Инициализировать контроллер
}else{ // Класс не найден
    render_message('Controller class not found');
}

// Теперь, ищем функцию инициализации
$method = 'init'; // Имя метода
$_ind = (!defined("WRAPPER") || !WRAPPER)?3:2;
if(isset($RTR->query[$_ind]) && strlen($RTR->query[$_ind])>0 && strpos($RTR->query[$_ind], '?')!==0 && $RTR->query[$_ind]!="get" && $RTR->query[$_ind]!="set" && $RTR->query[$_ind]!="__construct"){ // Данные есть
    $method = $RTR->query[$_ind]; // Имя метода
}

// Поиск метода
$_datas = array_merge($_GET, $_POST); // Объединить массивы
if(method_exists ($CTR , $method) && $method!="get" && $method!="set"){ // Метод существует
    $go = $CTR->$method($_datas); // Инициализировать всю делянку
    if(!$go['complete']){ // Действие не выполнено
        render_message($go['message']);
    }
}else{ // Метод не существует
    if(!defined("WRAPPER") || !WRAPPER){ // API
        render_message('This method is not exists');
    }else{ // Default
        header("Location: /errors/?code=404");
        exit();
    }
}
?>